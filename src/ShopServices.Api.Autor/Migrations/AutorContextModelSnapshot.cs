// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShopServices.Api.Autor.Data;

#nullable disable

namespace ShopServices.Api.Autor.Migrations
{
    [DbContext(typeof(AutorContext))]
    partial class AutorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShopServices.Api.Autor.Models.AutorLivro", b =>
                {
                    b.Property<int>("AutorLivroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AutorLivroId"));

                    b.Property<string>("Apelido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<string>("AutorLivroGuid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.HasKey("AutorLivroId");

                    b.ToTable("AutorLivros", (string)null);

                    b.HasData(
                        new
                        {
                            AutorLivroId = 1,
                            Apelido = "Mara",
                            AutorLivroGuid = "49f9e020-808d-4fd0-8ce8-2bd76a7ba199",
                            DataNascimento = new DateTime(2022, 3, 29, 6, 3, 43, 756, DateTimeKind.Local).AddTicks(2967),
                            Nome = "Maria"
                        },
                        new
                        {
                            AutorLivroId = 2,
                            Apelido = "Pedra",
                            AutorLivroGuid = "c7606156-c165-4da5-9e7d-28af654bb97d",
                            DataNascimento = new DateTime(2022, 3, 29, 6, 3, 43, 756, DateTimeKind.Local).AddTicks(2978),
                            Nome = "Pedro"
                        },
                        new
                        {
                            AutorLivroId = 3,
                            Apelido = "Tonho",
                            AutorLivroGuid = "368e956e-f665-4291-9a1a-53fc4cb4338a",
                            DataNascimento = new DateTime(2022, 3, 29, 6, 3, 43, 756, DateTimeKind.Local).AddTicks(2978),
                            Nome = "Antonio"
                        },
                        new
                        {
                            AutorLivroId = 4,
                            Apelido = "Cabeça",
                            AutorLivroGuid = "8bf309ec-b958-4bcd-99f4-c7dd110c376d",
                            DataNascimento = new DateTime(2022, 3, 29, 6, 3, 43, 756, DateTimeKind.Local).AddTicks(2979),
                            Nome = "Marcio"
                        },
                        new
                        {
                            AutorLivroId = 5,
                            Apelido = "Ana",
                            AutorLivroGuid = "de2eb41d-c9fd-4a5f-bbd9-57a8759d5cdb",
                            DataNascimento = new DateTime(2022, 3, 29, 6, 3, 43, 756, DateTimeKind.Local).AddTicks(2980),
                            Nome = "Ana"
                        },
                        new
                        {
                            AutorLivroId = 6,
                            Apelido = "Zé",
                            AutorLivroGuid = "25142ffd-7ea7-4de0-afce-3ec447536c27",
                            DataNascimento = new DateTime(2022, 3, 29, 6, 3, 43, 756, DateTimeKind.Local).AddTicks(2980),
                            Nome = "José"
                        },
                        new
                        {
                            AutorLivroId = 7,
                            Apelido = "JÔ",
                            AutorLivroGuid = "cd6087c4-48c8-4c25-a704-41af2e0271b3",
                            DataNascimento = new DateTime(2022, 3, 29, 6, 3, 43, 756, DateTimeKind.Local).AddTicks(2981),
                            Nome = "Joana"
                        },
                        new
                        {
                            AutorLivroId = 8,
                            Apelido = "Alex",
                            AutorLivroGuid = "90bd9ee0-da94-48ef-8377-a3d9122868d3",
                            DataNascimento = new DateTime(2022, 3, 29, 6, 3, 43, 756, DateTimeKind.Local).AddTicks(2982),
                            Nome = "Alessandro"
                        });
                });

            modelBuilder.Entity("ShopServices.Api.Autor.Models.GrauAcademico", b =>
                {
                    b.Property<int>("GrauAcademicoId")
                        .HasColumnType("integer");

                    b.Property<int>("AutorLivroId")
                        .HasColumnType("integer");

                    b.Property<string>("CentroAcademico")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("DataNota")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GrauAcademicoGuid")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("character varying");

                    b.HasKey("GrauAcademicoId");

                    b.ToTable("GrauAcademicos");
                });

            modelBuilder.Entity("ShopServices.Api.Autor.Models.GrauAcademico", b =>
                {
                    b.HasOne("ShopServices.Api.Autor.Models.AutorLivro", "AutorLivro")
                        .WithMany("GrauAcademicos")
                        .HasForeignKey("GrauAcademicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutorLivro");
                });

            modelBuilder.Entity("ShopServices.Api.Autor.Models.AutorLivro", b =>
                {
                    b.Navigation("GrauAcademicos");
                });
#pragma warning restore 612, 618
        }
    }
}
